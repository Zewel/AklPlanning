#pragma checksum "D:\AKLProjects\ZewelProjects\AKLNew\aklplanning\Views\View\DragAndDrop.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1015601912e55853b827069941706bc8c1c158cf"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_View_DragAndDrop), @"mvc.1.0.view", @"/Views/View/DragAndDrop.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanning\Views\_ViewImports.cshtml"
using SweaterPlanning;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanning\Views\_ViewImports.cshtml"
using SweaterPlanning.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1015601912e55853b827069941706bc8c1c158cf", @"/Views/View/DragAndDrop.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"403552f2f1d5c1e2905d5e7e2880ca8cb4e6f341", @"/Views/_ViewImports.cshtml")]
    public class Views_View_DragAndDrop : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1015601912e55853b827069941706bc8c1c158cf3256", async() => {
                WriteLiteral(@"
    <style>
        table#example.dataTable tbody tr.over {
            background-color: #ffa;
        }

            table#example.dataTable tbody tr.over > .sorting_1 {
                background-color: #ffa;
            }

        table#example2.dataTable tbody tr.over {
            background-color: #ffa;
        }

            table#example2.dataTable tbody tr.over > .sorting_1 {
                background-color: #ffa;
            }

    </style>

    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width"">
    <title>JS Bin</title>

    <link rel=""stylesheet"" type=""text/css"" href=""https://cdn.datatables.net/v/dt/dt-1.10.18/datatables.min.css"" />
    <script type=""text/javascript"" src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
    <script type=""text/javascript"" src=""https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js""></script>
    <script type=""text/javascript"" src=""https://cdn.datatables.net/v/dt/d");
                WriteLiteral(@"t-1.10.18/datatables.min.js""></script>

    <link rel=""stylesheet"" type=""text/css"" href=""https://cdn.datatables.net/select/1.2.6/css/select.dataTables.min.css"" />
    <script type=""text/javascript"" src=""https://cdn.datatables.net/select/1.2.6/js/dataTables.select.min.js""></script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1015601912e55853b827069941706bc8c1c158cf5601", async() => {
                WriteLiteral(@"

    <div class=""container"">
        <table id=""example"" class=""tablegrid display nowrap"" width=""100%"">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Office</th>
                    <th>Age</th>
                    <th>Start date</th>
                    <th>Salary</th>
                </tr>
            </thead>

            <tfoot>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Office</th>
                    <th>Age</th>
                    <th>Start date</th>
                    <th>Salary</th>
                </tr>
            </tfoot>

        </table>

        <table id=""example2"" class=""tablegrid display nowrap"" width=""100%"">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <");
                WriteLiteral(@"th>Position</th>
                    <th>Office</th>
                    <th>Age</th>
                    <th>Start date</th>
                    <th>Salary</th>
                </tr>
            </thead>

            <tfoot>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Office</th>
                    <th>Age</th>
                    <th>Start date</th>
                    <th>Salary</th>
                </tr>
            </tfoot>

        </table>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"

    <script>
        $(document).ready(function () {
            var dragSrcRow = null;  // Keep track of the source row
            var selectedRows = null;   // Keep track of selected rows in the source table
            var srcTable = '';  // Global tracking of table being dragged for 'over' class setting
            var rows = [];   // Global rows for #example
            var rows2 = [];  // Global rows for #example2

            var data = [
                [
                    """",
                    ""Tiger Nixon"",
                    ""System Architect"",
                    ""Edinburgh"",
                    ""5421"",
                    ""2011/04/25"",
                    ""$320,800""
                ],
                [
                    """",
                    ""Garrett Winters"",
                    ""Accountant"",
                    ""Tokyo"",
                    ""8422"",
                    ""2011/07/25"",
                    ""$170,750""
                ],
                [
     ");
                WriteLiteral(@"               """",
                    ""Ashton Cox"",
                    ""Junior Technical Author"",
                    ""San Francisco"",
                    ""1562"",
                    ""2009/01/12"",
                    ""$86,000""
                ],
                [
                    """",
                    ""Cedric Kelly"",
                    ""Senior Javascript Developer"",
                    ""Edinburgh"",
                    ""6224"",
                    ""2012/03/29"",
                    ""$433,060""
                ],
            ];

            var data2 = [
                [
                    """",
                    ""Rhona Davidson"",
                    ""Integration Specialist"",
                    ""Tokyo"",
                    ""6200"",
                    ""2010/10/14"",
                    ""$327,900""
                ],
                [
                    """",
                    ""Colleen Hurst"",
                    ""Javascript Developer"",
                    ""San Francisco"",");
                WriteLiteral(@"
                    ""2360"",
                    ""2009/09/15"",
                    ""$205,500""
                ],
                [
                    """",
                    ""Sonya Frost"",
                    ""Software Engineer"",
                    ""Edinburgh"",
                    ""1667"",
                    ""2008/12/13"",
                    ""$103,600""
                ],
                [
                    """",
                    ""Jena Gaines"",
                    ""Office Manager"",
                    ""London"",
                    ""3814"",
                    ""2008/12/19"",
                    ""$90,560""
                ],
            ]

            var table = $('#example').DataTable({
                data: data,
                paging: false,
                order: [[1, 'asc']],

                columnDefs: [{
                    orderable: false,
                    className: 'select-checkbox',
                    targets: 0
                }],
                select: {");
                WriteLiteral(@"
                    style: 'os',
                    selector: 'td:first-child'
                },

                // Add HTML5 draggable class to each row
                createdRow: function (row, data, dataIndex, cells) {
                    $(row).attr('draggable', 'true');
                },

                drawCallback: function () {
                    // Add HTML5 draggable event listeners to each row
                    rows = document.querySelectorAll('#example tbody tr');
                    [].forEach.call(rows, function (row) {
                        row.addEventListener('dragstart', handleDragStart, false);
                        row.addEventListener('dragenter', handleDragEnter, false)
                        row.addEventListener('dragover', handleDragOver, false);
                        row.addEventListener('dragleave', handleDragLeave, false);
                        row.addEventListener('drop', handleDrop, false);
                        row.addEventListener('dragend'");
                WriteLiteral(@", handleDragEnd, false);
                    });
                }
            });



            var table2 = $('#example2').DataTable({
                data: data2,
                paging: false,
                order: [[1, 'asc']],

                columnDefs: [{
                    orderable: false,
                    className: 'select-checkbox',
                    targets: 0
                }],
                select: {
                    style: 'os',
                    selector: 'td:first-child'
                },

                // Add HTML5 draggable class to each row
                createdRow: function (row, data, dataIndex, cells) {
                    $(row).attr('draggable', 'true');
                },

                drawCallback: function () {
                    // Add HTML5 draggable event listeners to each row
                    rows2 = document.querySelectorAll('#example2 tbody tr');
                    [].forEach.call(rows2, function (row) {
         ");
                WriteLiteral(@"               row.addEventListener('dragstart', handleDragStart, false);
                        row.addEventListener('dragenter', handleDragEnter, false)
                        row.addEventListener('dragover', handleDragOver, false);
                        row.addEventListener('dragleave', handleDragLeave, false);
                        row.addEventListener('drop', handleDrop, false);
                        row.addEventListener('dragend', handleDragEnd, false);
                    });
                }
            });

            function handleDragStart(e) {
                // this / e.target is the source node.

                // Set the source row opacity
                this.style.opacity = '0.4';

                // Keep track globally of the source row and source table id
                dragSrcRow = this;
                srcTable = this.parentNode.parentNode.id

                // Keep track globally of selected rows
                selectedRows = $('#' + srcTable).DataTabl");
                WriteLiteral(@"e().rows({ selected: true });

                // Allow moves
                e.dataTransfer.effectAllowed = 'move';

                // Save the source row html as text
                e.dataTransfer.setData('text/plain', e.target.outerHTML);

            }

            function handleDragOver(e) {
                if (e.preventDefault) {
                    e.preventDefault(); // Necessary. Allows us to drop.
                }

                // Allow moves
                e.dataTransfer.dropEffect = 'move';

                return false;
            }

            function handleDragEnter(e) {
                // this / e.target is the current hover target.  

                // Get current table id
                var currentTable = this.parentNode.parentNode.id

                // Don't show drop zone if in source table
                if (currentTable !== srcTable) {
                    this.classList.add('over');
                }
            }

            function hand");
                WriteLiteral(@"leDragLeave(e) {
                // this / e.target is previous target element.

                // Remove the drop zone when leaving element
                this.classList.remove('over');
            }

            function handleDrop(e) {
                // this / e.target is current target element.

                if (e.stopPropagation) {
                    e.stopPropagation(); // stops the browser from redirecting.
                }

                // Get destination table id, row
                var dstTable = $(this.closest('table')).attr('id');

                // No need to process if src and dst table are the same
                if (srcTable !== dstTable) {

                    // If selected rows and dragged item is selected then move selected rows
                    if (selectedRows.count() > 0 && $(dragSrcRow).hasClass('selected')) {

                        // Add row to destination Datatable
                        $('#' + dstTable).DataTable().rows.add(selectedRows.");
                WriteLiteral(@"data()).draw();

                        // Remove row from source Datatable
                        $('#' + srcTable).DataTable().rows(selectedRows.indexes()).remove().draw();

                    } else {  // Otherwise move dragged row

                        // Get source transfer data
                        var srcData = e.dataTransfer.getData('text/plain');

                        // Add row to destination Datatable
                        $('#' + dstTable).DataTable().row.add($(srcData)).draw();

                        // Remove row from source Datatable
                        $('#' + srcTable).DataTable().row(dragSrcRow).remove().draw();
                    }

                }
                return false;
            }

            function handleDragEnd(e) {
                // this/e.target is the source node.

                // Reset the opacity of the source row
                this.style.opacity = '1.0';

                // Clear 'over' class from both tables
   ");
                WriteLiteral(@"             // and reset opacity
                [].forEach.call(rows, function (row) {
                    row.classList.remove('over');
                    row.style.opacity = '1.0';
                });

                [].forEach.call(rows2, function (row) {
                    row.classList.remove('over');
                    row.style.opacity = '1.0';
                });
            }



        });


    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
