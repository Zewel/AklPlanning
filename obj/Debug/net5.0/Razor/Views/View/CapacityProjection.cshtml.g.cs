#pragma checksum "D:\AKLProjects\ZewelProjects\AKLNew\aklplanning\Views\View\CapacityProjection.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "37f6b413cde4d4a539a840d30f3320ab5729e0fc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_View_CapacityProjection), @"mvc.1.0.view", @"/Views/View/CapacityProjection.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanning\Views\_ViewImports.cshtml"
using SweaterPlanning;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanning\Views\_ViewImports.cshtml"
using SweaterPlanning.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"37f6b413cde4d4a539a840d30f3320ab5729e0fc", @"/Views/View/CapacityProjection.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"403552f2f1d5c1e2905d5e7e2880ca8cb4e6f341", @"/Views/_ViewImports.cshtml")]
    public class Views_View_CapacityProjection : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<UserOperationPermission>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<style>

    .red {
        background-color: antiquewhite;
    }
</style>

<div class=""container-fluid"">
    <div class=""row"">
        <!-- left column -->
        <div class=""col-md-12"">
            <!-- general form elements -->
            <div class=""card card-primary"">
                <div class=""card-header"">
                    <h3 class=""card-title"">Yearly Capacity Projection</h3>
                </div>

                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "37f6b413cde4d4a539a840d30f3320ab5729e0fc3743", async() => {
                WriteLiteral(@"
                    <div class=""card-body"">
                        <div class=""row"">
                            <div class=""col-md-4"">
                                <div class=""form-group"" id=""divdllTaskType"">
                                    <label for=""dllTaskType"">Projection Year</label>
                                    <select class=""form-control select2"" onchange=""IsDuplicate()"" style=""width: 100%;"" id=""dllYear"" required>
                                    </select>
                                </div>
                            </div>
");
                WriteLiteral(@"                            <div class=""col-md-4"">
                                <div class=""form-group"">
                                    <label for=""txtOrderDate"">Tolerate Timing (%)</label>
                                    <input type='text' class=""form-control"" id='tolerateTiming' required />
                                </div>
                            </div>
                        </div>
                    </div>
                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                <div class=""card-footer"">
                    <button type=""submit"" onclick=""Add()"" id=""processButton"" class=""float-right btn btn-primary"">Submit</button>
                </div>
            </div>


            <div class=""card card-primary"">
                <div class=""card-header row"">
                    <div class=""col-md-4"">
                        <h3 class=""card-title"">Yearly Capacity Projection List</h3>
                    </div>
                    <div class=""col-md-4"">

");
            WriteLiteral(@"                        <div class=""row"">
                            <div class=""col-md-3"">
                                <label for=""dllTaskType"">Allocation Year</label>
                            </div>
                            <div class=""col-md-6"">
                                <select class=""form-control select2"" style=""width: 100%;"" onchange=""LoadTableChangeYear()"" id=""dllPorjectionYear"">
                                </select>
                            </div>
                        </div>

");
            WriteLiteral(@"
                    </div>
                </div>

                <div class=""card-body"">
                    <table id=""dailyTaskTable"" class=""table table-responsive table-bordered table-hover dataTable"">
                        <thead>
                            <tr style=""background-color:antiquewhite"">
                                <th align=""center"">CapacityProjectionId</th>
                                <th>Year</th>
                                <th align=""center"">Factory</th>
                                <th>Brand</th>
                                <th>Gauge</th>
                                <th>Month</th>
                                <th>Day No.</th>
                                <th>Total Minutes</th>
                                <th>Avg. Knitting Time</th>
                                <th>Tolarance Timing %</th>
                                <th>Machine Qty.</th>
                                <th>Total Order Qty</th>
                              ");
            WriteLiteral(@"  <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan=""10"">Total</th>
                                <th></th>
                                <th></th>

                            </tr>
                        </tfoot>
                    </table>
                </div>
                <div class=""card-footer"">
");
            WriteLiteral("                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"

    <script>

        $(function () {

            LoadProjectionYear('dllPorjectionYear');
            LoadYear('dllYear');
            LoadTableChangeYear();

            $('#dailyTaskTable tbody').on('click', 'button', function () {
                debugger;
                //var myData = table1.row(this).data();
                var myData = table1.row($(this).parents('tr')).data();
                var data = parseInt(myData.CapacityProjectionId);
                var flag = 'Edit';

                edit(data)
            });
        });

        function LoadProjectionYear(elementId) {
            $.ajax({
                url: apiHeader + 'api/Common/GetAllocateYear',
                type: ""GET"",
                dataType: ""json"",
                success: function (result) {
                    $('#' + elementId + '').empty();
                    $('#' + elementId + '').append(""<option value=''>--Select Year--</option>"");

                    for (var i = 0; i < result.length");
                WriteLiteral(@"; i++) {

                        $('#' + elementId + '').append($(""<option></option>"").val(result[i].YearId).html(result[i].YearName));
                    }

                    $('#dllPorjectionYear').val(currentYear).trigger('change');
                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });

        }

        function LoadYear(elementId) {
            $.ajax({
                url: apiHeader + 'api/Common/GetYear',
                type: ""GET"",
                dataType: ""json"",
                success: function (result) {
                    $('#' + elementId + '').empty();
                    $('#' + elementId + '').append(""<option value=''>--Select Year--</option>"");

                    for (var i = 0; i < result.length; i++) {

                        $('#' + elementId + '').append($(""<option></option>"").val(result[i].YearId).html(result[i].YearName));
                    }
   ");
                WriteLiteral(@"             },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });

        }


        function IsDuplicate() {
            var Year = $('#dllYear').val();
            $.ajax({
                url: apiHeader + 'api/CapacityProjection/IsProcessCompleted/' + Year,
                type: ""GET"",
                dataType: ""json"",
                success: function (result) {
                    if (result == 1) {
                        //$(""#processButton"").prop(""disabled"", true);
                        $(""#processButton"").attr(""disabled"", true);
                        Toast.fire({
                            icon: 'error',
                            title: "" Already This Year Process Completed""
                        });

                    } else {
                        $(""#processButton"").prop(""disabled"", false);
                    }
                },
                error: function (errorm");
                WriteLiteral(@"essage) {
                    alert(errormessage.responseText);
                }
            });

        }
        var Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000
        });
        function Add() {
            Swal.fire({
                title: 'Do you want to save the changes?',
                showDenyButton: true,
                showCancelButton: true,
                confirmButtonText: `Save`,
                denyButtonText: `Don't save`,
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {
                    Submit();

                    //Swal.fire('Saved!', 'Submit()', 'success')
                } else if (result.isDenied) {
                    Swal.fire('Changes are not saved', '', 'info')
                }
            });

        }
        function edit(id) {
            Swal.fi");
                WriteLiteral(@"re({
                title: 'Do you want to save the changes?',
                showDenyButton: true,
                showCancelButton: true,
                confirmButtonText: `Save`,
                denyButtonText: `Don't save`,
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {
                    SubmitForEdit(id) ;

                    //Swal.fire('Saved!', 'Submit()', 'success')
                } else if (result.isDenied) {
                    Swal.fire('Changes are not saved', '', 'info')
                }
            });

        }

        function Submit() {

            debugger;
            debugger;
            var Year = $('#dllYear').val();
            //var AvgTiming = $('#avgTiming').val();
            var TolaranceTime = $('#tolerateTiming').val();

            $.ajax({
                type: ""GET"",
                //url: apiHeader + 'api/CapacityProjection/ProjectionProcess");
                WriteLiteral(@"/' + Year + '/' + AvgTiming + '/' + TolaranceTime,
                url: apiHeader + 'api/CapacityProjection/ProjectionProcess/' + Year + '/' + TolaranceTime,
                contentType: ""json"",
                //data: JSON.stringify(obj),
                success: function (result) {
                    Toast.fire({
                        icon: 'success',
                        title: ""Process Complete""
                    });
                    location.reload();
                },

                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }

        function SubmitForEdit(capacityProjId) {

            $.ajax({
                type: ""GET"",
                url: apiHeader + 'api/CapacityProjection/EditProjectionProcess/' + capacityProjId,
                contentType: ""json"",
                success: function (result) {
                    Toast.fire({
                        icon: 'success',
  ");
                WriteLiteral(@"                      title: ""Process Complete""
                    });
                    location.reload();
                },

                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }
        var table1;
        function LoadTableChangeYear() {
            debugger;


                var yearId = isNaN(parseInt($('#dllPorjectionYear').val())) ? parseInt(currentYear) : parseInt($('#dllPorjectionYear').val());
             $('#dailyTaskTable').DataTable().clear().destroy();
            $(""tr.lvlcollapse"").off('click');
            
             table1 = $('#dailyTaskTable').DataTable({
                    ""ajax"": { ""url"": apiHeader + ""api/CapacityProjection/ProjectionProcessList/"" + yearId, ""dataSrc"": """", ""crossDomain"": true, },
                    //""buttons"": ['excel', 'pdf', 'copy'],
                    // ""scrollY"": ""300px"",
                    //""scrollY"": ""300px"",
                    ""fixe");
                WriteLiteral(@"dHeader"": true,
                    ""ordering"": false,
                    ""lengthMenu"": [[-1], [""All""]],
                    ""rowsGroup"": [1, 2, 3, 4],
                    ""vertical_align"": 'middle',
                    ""columns"":
                        [
                            { ""data"": ""CapacityProjectionId"" },
                            { ""data"": ""Year"" },
                            { ""data"": ""Factory"" },
                            { ""data"": ""Brand"" },
                            { ""data"": ""Gauge"" },
                            { ""data"": ""MonthName"" },
                            { ""data"": ""DayNo"" },
                            { ""data"": ""TotalMinutes"" },
                            { ""data"": ""AvgKnittingTime"" },
                            { ""data"": ""TolaranceTiming"" },
                            { ""data"": ""NoOfMachine"" },
                            { ""data"": ""TotalProductionQty"" },
                            {
                                ""data"": null,
               ");
                WriteLiteral(@"                 ""defaultContent"": ""<button class='edit btn btn-block bg-gradient-success btn-sm'>Edit</button>"",
                                ""targets"": -1
                            }
                        ],
                    ""columnDefs"": [
                        {
                            ""targets"": [0],
                            ""visible"": false,
                            ""searchable"": false,
                            ""orderable"": false
                        },
                        { orderable: false, targets: '_all' },

                        { className: 'dt-center', targets: [1, 2, 3, 4] },

                        //, { className: ""btn"", targets: 9 },
                    ],
                    ""footerCallback"": function (row, data, start, end, display) {
                        var api = this.api();
                        // Remove the formatting to get integer data for summation
                        var intVal = function (i) {

                     ");
                WriteLiteral(@"       return typeof i === 'string' ?
                                i.replace(/[\$,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;

                        };


                        if (api.column(11).data().length) {
                            var pageTotal = api
                                .column(11, { page: 'current' })
                                .data()
                                .reduce(function (a, b) {
                                    return intVal(a) + intVal(b);
                                })
                        }
                        else { pageTotal = 0 };


                        $(api.column(11).footer()).html(
                            pageTotal + ' Pcs'
                        );
                    }

                });

            $(""#dailyTaskTable"").rowspanizer({ vertical_align: 'middle' });

");
                WriteLiteral("           \r\n\r\n        }\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<UserOperationPermission> Html { get; private set; }
    }
}
#pragma warning restore 1591
