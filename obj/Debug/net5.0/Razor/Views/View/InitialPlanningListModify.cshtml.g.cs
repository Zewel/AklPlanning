#pragma checksum "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\View\InitialPlanningListModify.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6e18d596c2ccd7550c9399c505355d9874161b7d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_View_InitialPlanningListModify), @"mvc.1.0.view", @"/Views/View/InitialPlanningListModify.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\_ViewImports.cshtml"
using SweaterPlanning;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\_ViewImports.cshtml"
using SweaterPlanning.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\View\InitialPlanningListModify.cshtml"
using System.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6e18d596c2ccd7550c9399c505355d9874161b7d", @"/Views/View/InitialPlanningListModify.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"403552f2f1d5c1e2905d5e7e2880ca8cb4e6f341", @"/Views/_ViewImports.cshtml")]
    public class Views_View_InitialPlanningListModify : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<System.Data.DataSet>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/dataTableLoader.gif"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<style>
    .tag:hover {
        background: #b6ff00;
        color: white;
    }

    .hide_column {
        display: none;
    }
</style>
<div class=""container-fluid"">
    <div class=""row"">
        <div class=""col-md-12"">
            <div class=""card card-success"">
                <div class=""card-header"">
                    <div class=""row"">
                        <div class=""col-md-1"">
                            <label for=""dllTaskType"" style=""float:right"">Planning Year</label>
                        </div>
                        <div class=""col-md-1"">
                            <select class=""form-control select2"" style=""width: 100%;""  id=""dllYear"">
                            </select>
                        </div>
                        <div class=""col-md-1"">
                            <label for=""dllTaskType"" style=""float:right"">Brand</label>
                        </div>
                        <div class=""col-md-2"">
                            <select class=""form");
            WriteLiteral(@"-control select2"" style=""width: 100%;""  id=""dllBrand"">
                            </select>
                        </div>
                        <div class=""col-md-1"">
                            <label for=""dllTaskType"" style=""float:right"">Gauge</label>
                        </div>
                        <div class=""col-md-2"">
                            <select class=""form-control select2"" style=""width: 100%;"" onchange=""InitialPlanningList()"" id=""dllGauge"">
                            </select>
                        </div>
                        <div class=""offset-md-1 col-md-2"">
                            <input type=""text"" class=""search form-control float-right"" placeholder=""Find Style Info..."" id=""styleId"" /> ");
            WriteLiteral(@"
                        </div>
                        <div class=""col-md-1"">
                            <button class=""button  btn-warning"" data-toggle=""tooltip"" data-placement=""top"" title=""Search Style"" style=""border-radius:42%; margin-top:10px"" onclick=""ShowStlInfo()""><span class=""float-right fa fa-search""></span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class=""row"">
        <div class=""col-md-12"" id=""InitialPlanningList"">

        </div>

    </div>
    <div class=""modal fadeInUp"" id=""GRNModal"">
        <div class=""modal-dialog modal-xl"">
            <div class=""modal-content"">
                <div class=""modal-header card-header"">
                    <h4 class=""modal-title"" id=""headderId""></h4>
                    <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                        <span aria-hidden=""true"">&times;</span>
                    </butt");
            WriteLiteral(@"on>
                </div>
                <div class=""modal-body"">
                    <div class=""col-md-12"" id=""GRNBody"">
                        
                    </div>
                </div>

            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
    <div class=""modal fadeInUp"" id=""TAndAModal"">
        <div class=""modal-dialog modal-xl"">
            <div class=""modal-content"">
                <div class=""modal-header card-header"">
                    <h4 class=""modal-title"" id=""headderId""></h4>
                    <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                        <span aria-hidden=""true"">&times;</span>
                    </button>
                </div>
                <div class=""modal-body"">
                    <div class=""col-md-12"" id=""TAndABody"">
                        
                    </div>
                </div>

            </div>
            <!-- /");
            WriteLiteral(@".modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
    <div class=""modal fadeInUp"" id=""viewStyle"">
        <div class=""modal-dialog modal-xl"">
            <div class=""modal-content"">
                <div class=""modal-header card-header"" style=""background-color:dodgerblue"">
                    <h5 class=""modal-title"" id=""headderId"">Planning PO List</h5>
                    <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                        <span aria-hidden=""true"">&times;</span>
                    </button>
                </div>
                <div class=""modal-body"">
                    <div class=""col-md-12 table-responsive"" id=""viewBody"">
                    </div>
                </div>
                <div class=""modal-footer justify-content-between"">
                    <button type=""button"" class=""btn btn-outline-dark float-right"" data-dismiss=""modal"">Close</button>
");
            WriteLiteral(@"
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>

    <div class=""modal fadeInUp"" id=""PoListModal"">
        <div class=""modal-dialog modal-xl"">
            <div class=""modal-content"">
                <div class=""modal-header card-header"" style=""background-color:dodgerblue"">
");
            WriteLiteral(@"                    <div class=""col-md-4"">
                        <h5 class=""modal-title"" id=""headderId""><span class=""fa fa-list""></span> Add Po In Planning Slot</h5>
                    </div>
                    <div class=""col-md-2"">
                        <label id=""factoryInfo"" style=""color:white""></label>
                    </div>

                    <div class=""col-md-2"">
                        <label id=""leadTimeInfo"" style=""color:white""></label>
                    </div>
                    <div class=""col-md-1"">
                        <label id=""MachineLabel"" style=""color:white""></label>
                        <input type=""hidden"" id=""slotId"" />
                    </div>
                    <div class=""col-md-1"">
                        <label id=""machineQtyInfo"" style=""color:white""></label>
                    </div>
                    <div class=""col-md-1"">
                        <label id=""RemainingMachineInfo"" style=""color:red""></label>
                    </div>
 ");
            WriteLiteral(@"                   <div class=""col-md-1"">

                        <button type=""button"" class=""close"" onclick=""Close()"" aria-label=""Close"">
                            <span aria-hidden=""true"">&times;</span>
                        </button>
                    </div>
");
            WriteLiteral(@"
                </div>
                <div class=""modal-body"">
                    <div class=""row"">
                        <div class=""col-md-3"">
                            <div class=""form-group"">
                                <label class=""control-label""> Year</label>
                                <select name=""allocationYear"" class=""form-control select2"" style=""width: 100%;"" id=""year"" onchange=""GetFactory('factory');GetGauge('gauge');GetBrand('brand')"">
                                </select>
                            </div>
                        </div>
                        <div class=""col-md-3"">
                            <div class=""form-group"">
                                <label class=""control-label""> Factory</label>
                                <select name=""factoryName"" class=""form-control select2"" style=""width: 100%;"" id=""factory""");
            BeginWriteAttribute("onchange", " onchange=\"", 7647, "\"", 7658, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6e18d596c2ccd7550c9399c505355d9874161b7d12295", async() => {
                WriteLiteral("--Select Month--");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                        <div class=""col-md-3"">
                            <div class=""form-group"">
                                <label class=""control-label"">Brand</label>
                                <select class=""form-control select2"" style=""width: 100%;"" id=""brand""");
            BeginWriteAttribute("onchange", " onchange=\"", 8131, "\"", 8142, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                                </select>
                            </div>
                        </div>
                        <div class=""col-md-3"">
                            <div class=""form-group"">
                                <label class=""control-label"">Gauge</label>
                                <select class=""form-control select2"" style=""width: 100%;"" id=""gauge""");
            BeginWriteAttribute("onchange", " onchange=\"", 8535, "\"", 8546, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6e18d596c2ccd7550c9399c505355d9874161b7d14607", async() => {
                WriteLiteral("--Select Gauge--");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-md-3"">
                            <div class=""form-group"">
                                <label for=""txtOrderDate"">Lead Time</label>
                                <input type='text' name=""leadTime"" class=""form-control"" id='leadTime' oninput=""GetSlotDate()"" required />
                            </div>
                        </div>
                        <div class=""col-md-3"">
                            <div class=""form-group"">
                                <div class=""form-check"">
                                    <input type=""checkbox"" class=""form-check-input"" id=""manualFromDate"" onclick=""GetStatDateReCalculate()"">
                                    <label class=""form-check-label"" for=""manualFromDate"" style=""color:red"">Manually Given Start Date</label>
               ");
            WriteLiteral(@"                 </div>
                                <div class=""form-group"">
                                    <label id=""LastDateLabel"" style=""color:red""></label>
                                </div>
                            </div>
                        </div>
                        <div class=""col-md-3"">

                            <div class=""form-group"">
                                <label for=""txtOrderDate"">Start Date</label>
                                <input type='text' class=""form-control"" id='startDate' onchange=""CalculateDate()"" />
                            </div>
                        </div>
                        <div class=""col-md-3"">
                            <div class=""form-group"">
                                <label for=""txtOrderDate"">End Date</label>
                                <input type='text' class=""form-control datepicker"" id='endDate' />
                                <label id=""machineQty"" style=""color:red""></label>
              ");
            WriteLiteral(@"                  <input type=""hidden"" id=""McnQty"" />
                            </div>
                        </div>
                    </div>
                    <div class=""row"">
                        <table id=""myTable"" class=""table table-bordered table-responsive"">
                            <thead>
                                <tr style=""background-color: aliceblue"">
                                    <th>PO NO<span style=""color:red;font-weight:bold""> *</span></th>
                                    <th>Style<span style=""color:red;font-weight:bold""> *</span></th>
                                    <th>Order Qty</th>
                                    <th>Actual Ship Date</th>
                                    <th>Already Knittings</th>
                                    <th>Remaining Knittings</th>
                                    <th>Jac Time</th>
                                    <th>Knitting Pro./Mc.</th>
                                    <th>Req. Machine</th>
");
            WriteLiteral(@"                                    <th>Production/Day</th>
                                    <th>Trial Strat Date</th>
                                    <th>Knitting Start Date</th>
                                    <th>Knitting End Date</th>
                                    <th>Remarks</th>
                                    <th>Day Before Shipping</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id=""poList""></tbody>
                            <tfoot>
                                <tr id=""trallocationListTable"" style=""background-color:khaki"">
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
                <div class=""modal-footer"">
                    <button type=""button"" class=""float-left btn btn-warning"" onclick=""Close()"">Close</button>
            ");
            WriteLiteral(@"        <button type=""button"" class=""btn btn-success"" onclick=""CreateSlot()"">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class=""col-md-12 col-xs-12 text-center"" id=""testSpan"" style=""display: none"">

    <span>
        Please wait Data is loading -
        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6e18d596c2ccd7550c9399c505355d9874161b7d20418", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            WriteLiteral("    </span>\r\n\r\n</div>\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        $(function () {
            LoadYear('dllYear');
            GetAllocationYear('year');
            GetMcnBrand('dllBrand');
            GetGauge('dllGauge');
            LoadFactory(""dllFactory"");
            $('#startDate').attr(""disabled"", true);
            $('#endDate').attr(""disabled"", true);

            $(""#styleId"").autocomplete({

                source: function (request, response) {
                    $.ajax({
                        url: apiHeader + ""api/Common/GetStlNo/"" + request.term,
                        dataType: ""json"",
                        success: function (data) {
                            var stl = [];
                            $.each(data, function (i, item) {
                                stl.push(item.StlDesc);
                            });
                            response(stl);

                        }
                    });
                },
                minLength: 3,

            });
        });
       ");
                WriteLiteral("// var table;\r\n\r\n        function InitialPlanningList() {\r\n           var year = $(\'#dllYear\').val();\r\n             var gauge = $(\'#dllGauge\').val();\r\n             var mcn = $(\'#dllBrand\').val();\r\n             var urlpath = \'");
#nullable restore
#line 306 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\View\InitialPlanningListModify.cshtml"
                       Write(Url.Action("InitialPlanningPartialModify", "PartialView"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
            debugger;


             $.ajax({
                type: ""GET"",
                 url: urlpath,
                contentType: ""application/json;charset=utf-8"",
                 data: { yearId: year, gaugeId: gauge, brandId: mcn },
                 dataType: ""html"",
                 beforeSend: function () {
                     $('#testSpan').show();
                     $(""#InitialPlanningList"").empty();
                 },
                success: function (result) {

                    $(""#InitialPlanningList"").html(result);
                    $('#testSpan').hide();

                },

                complete: function () {
                    var groupColumn = 13;
                   
                    var table = $('#InitalPlanning_' + 1).DataTable({
                        ""columnDefs"": [

                        ],
                        ""order"": [[groupColumn, 'asc']],
                        ""displayLength"": -1,
                        ""paging"": false,");
                WriteLiteral(@"
                        ""fixedHeader"": true,
                       
                    });

                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }


         function InitialPlanningListOld() {
             var year = $('#dllYear').val();
             var gauge = $('#dllGauge').val();
             var mcn = $('#dllBrand').val();
             var urlpath = '");
#nullable restore
#line 353 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\View\InitialPlanningListModify.cshtml"
                       Write(Url.Action("InitialPlanningPartialModify", "PartialView"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
            $.ajax({
                url: urlpath,
                dataType: 'html',
                type: ""Get"",
                data: { yearId: year, gaugeId: gauge, brandId: mcn},
                async: false,
                beforeSend: function () {
                    $('#testSpan').show();
                    $(""#InitialPlanningList"").empty();
                },
                success: function (data) {


                    $(""#InitialPlanningList"").html("""");
                    $(""#InitialPlanningList"").html(data);
                    $('#testSpan').hide();
                },
                complete: function () {
                    var groupColumn = 11;
                    //for (let i = 1; i <= 8; i++) {

                    //}


                    var table = $('#InitalPlanning_' + 1).DataTable({
                        ""columnDefs"": [
                            { width: 2, targets: 5 }
                        ],
                        ""order"": [[groupColumn,");
                WriteLiteral(@" 'asc']],
                        ""displayLength"": -1,
                        ""paging"": false,
                        ""fixedHeader"": true,
                        ""autoWidth"": true
                        //""drawCallback"": function (settings) {
                        //    var api = this.api();
                        //    var rows = api.rows({ page: 'current' }).nodes();
                        //    var last = null;

                        //    api.column(groupColumn, { page: 'current' }).data().each(function (group, i) {
                        //        if (last !== group) {
                        //            $(rows).eq(i).before(
                        //                '<tr class=""group""><td colspan=""23""   style=""float:left"">' + group + '</td></tr>'
                        //            );

                        //            last = group;
                        //        }
                        //    });
                        //}
                    });

         ");
                WriteLiteral(@"       }
            });
        }
        function LoadYear(elementId) {
            $.ajax({
                url: apiHeader + 'api/Common/GetAllocateYear',
                type: ""GET"",
                dataType: ""json"",
                async: false,
                success: function (result) {

                    if (result.length > 0) {
                        $('#' + elementId + '').empty();
                        for (var i = 0; i < result.length; i++) {

                            $('#' + elementId + '').append($(""<option></option>"").val(result[i].YearId).html(result[i].YearName));
                        }
                    }

                    $('#dllYear').val(currentYear).trigger('change');

                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });

        }
        function ShowStlData(data) {

             var urlpath = '");
#nullable restore
#line 434 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\View\InitialPlanningListModify.cshtml"
                       Write(Url.Action("StyleInfo", "PartialView"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
            $.ajax({
                url: urlpath,
                type: ""Get"",
                dataType: 'html',
                async: false,
                data: { styleNo: data },
                success: function (result) {

                    $('#viewStyle').modal({ backdrop: 'static', keyboard: false });
                    $('#viewBody').html(result);
                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }


        function ShowStlInfo() {
            var styleNo = $('#styleId').val();
             var urlpath = '");
#nullable restore
#line 455 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\View\InitialPlanningListModify.cshtml"
                       Write(Url.Action("StyleInfoByStyleNo", "PartialView"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
            $.ajax({
                url: urlpath,
                type: ""Get"",
                dataType: 'html',
                async: false,
                data: { styleNo: styleNo },
                success: function (result) {

                    $('#viewStyle').modal({ backdrop: 'static', keyboard: false });
                    $('#viewBody').html(result);
                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }

        function ActionForSlot(data) {

            $('#PoListModal').modal({ backdrop: 'static', keyboard: false });
            var year = $('#dllYear').val();
            $('#year').val(year).trigger('change');

            var gaugeId = parseInt($('#gaugeId_' + data).val());
            if (gaugeId == 4) {
                gaugeId = 5;
            } else {
                gaugeId = gaugeId;
            }
            $('#gauge').val(gaugeId).trigger('");
                WriteLiteral(@"change');
            var machnType = 0;

            $('#InitalPlanning_'+data +' tbody tr').each(function (index) {
                if ($(this).find('.checkBoxCls').prop('checked')) {

                    var poCode = $(this).find('.poCode').val();
                    var poNo = $(this).find('.poNo').text();
                    var stlCode = $(this).find('.stdCode').val();
                    var style = $(this).find('.stlNo').text();
                    var ocQty = $(this).find('.poQty').text();
                    var shipDate = $(this).find('.exfactory').text();
                    var alreadyKnitt = $(this).find('.planningQty').text();
                    var remainingQty = parseInt(ocQty)- parseInt(alreadyKnitt);
                    var smvKn = $(this).find('.smvKn').val();
                    var stltype = $(this).find('.critType').text();
                    machnType = parseInt($(this).find('.mcnId').val());
                    var iniPoSplit = $(this).find('.poSplitId').val();
   ");
                WriteLiteral(@"                 var knOperationId = $(this).find('.knOperationId').val();

                    var poOwnerType = $(this).find('.poOwnerType').val();
                    //var productionPeraMcn = $(this).find('.stlNo').text();
                    //var reqMcn = $(this).find('.stlNo').text();
                    //var productionPerDay = $(this).find('.stlNo').text();
                    //var knittStart = $(this).find('.stlNo').text();
                    //var KnittEnd = $(this).find('.stlNo').text();
                    //var dayBeforeShipping = daysdifference(new Date(KnittEnd), new Date(shipDate));
                    var rowCountItem = parseInt($('#myTable tbody tr').length);
                    var sl = rowCountItem + 1;
                    var dtThreadPositionSize = $('#myTable');
                    var tableBodyThreadPositionSize = dtThreadPositionSize.find('tbody');
                    //tableBody.empty();

                    tableBodyThreadPositionSize.append('<tr id=""tr_' + sl + '"">");
                WriteLiteral(@"'
                        + '<td style=""display:none;"">  <label  style=""width: 150px"" class=""planningSlotDetailsId"" name=""planningSlotDetailsId"" id = ""planningSlotDetailsId' + sl.toString() + '""  > ' + 0 + ' </label ></td>'
                        + '<td style=""display:none;"">  <label  style=""width: 150px"" class=""poCodc"" name=""poCod"" id = ""poCod' + sl.toString() + '""  > ' + poCode + ' </label ></td>'
                        + '<td style=""display:none;"">  <label  style=""width: 150px"" class=""ppSplit"" name=""poSplit"" id = ""poSplit' + sl.toString() + '""  > ' + iniPoSplit + ' </label ></td>'
                        + '<td style=""display:none;"">  <label  style=""width: 150px"" class=""knOp"" name=""knOp"" id = ""knOp' + sl.toString() + '""  > ' + knOperationId + ' </label ></td>'
                        + '<td style=""display:none;"">  <label  style=""width: 150px"" class=""poOwn"" name=""poOwn"" id = ""poOwn' + sl.toString() + '""  > ' + poOwnerType + ' </label ></td>'
                        + '<td > <label  style=""width: 120");
                WriteLiteral(@"px"" name=""poNO"" id = ""poNO' + sl.toString() + '""  > ' + poNo + ' </label ></td>'
                        + '<td style=""display:none;""><input  style=""width: 120px"" type=""text"" class=""stlCodec"" name=""stlCode"" id=""PONumber' + sl.toString() + '""value=""' + stlCode + '""  /></td>'
                        + '<td style=""""><label name=""stlNo"" style=""cursor:pointer"">' + style + ' </label></td>'
                        + '<td style=""""><label name=""ocQty"" class=""ocQtyc""  id = ""ocQty' + sl.toString() + '""  > ' + ocQty + ' </label ></td>'
                        + '<td style=""""><label name=""ShipDate"" class=""exFactoryDay""  id = ""ShipDate' + sl.toString() + '""  > ' + shipDate + ' </label ></td>'

                        + '<td style=""""> <label  style=""width: 120px"" class=""alreadyKnitt"" name=""alreadyKnitt"" id = ""alreadyKnitt' + sl.toString() + '""  > ' + alreadyKnitt + ' </label ></td>'
                        + '<td style=""""><input  style=""width: 70px;"" type=""number"" class=""remainingQty"" id=""remaining' + sl.toString() +");
                WriteLiteral(@" '"" onchange = ""CalculateMachine( $(this))""  value=""' + remainingQty + '""     /></td>'
                        + '<td style="""">  <label name=""smvKn"" class=""smvKnlbl"" id = ""smvKn' + sl.toString() + '""  > ' + smvKn + ' </label ></td>'

                        + '<td style=""""><input  style=""width: 70px;"" name=""productionPeraMcn"" class=""productionPeraMcn"" readonly type=""text"" id=""ProdMth' + sl.toString() + '"" value=""""     onchange = ""CalLeadTime(' + sl.toString() + ')""  /></td>'
                        + '<td style=""""><input type=""number"" style=""width: 67px;"" class=""reqMachine"" name=""reqMachine""  id=""reqMachine' + sl.toString() + '"" value=""""     /></td>'
                        + '<td style=""""><input  style=""width: 70px;"" class=""productionPerDay"" readonly type=""text"" name=""productionPerDay"" id=""FabIns' + sl.toString() + '""   value=""""     /></td>'
                        + '<td style=""""><input style=""width: 120px"" class=""trailDate datepicker"" name=""TrailDate""  type=""text"" id=""Comments' + sl.toString() + '"" v");
                WriteLiteral(@"alue=""""  /></td>'
                        + '<td style=""""><input style=""width: 120px"" class=""knitStartDate datepicker"" name=""knittStart"" type=""text"" id=""Comments' + sl.toString() + '"" value=""""  /></td>'

                        + '<td style=""""><input  style=""width: 70px;"" class=""knitEndDate datepicker"" name=""KnittEnd"" readonly type=""text"" id=""PCD' + sl.toString() + '"" value=""""     /></td>'
                        + '<td style=""""><input  style=""width: 70px;"" class=""remarks"" readonly type=""text"" name=""stltype"" id=""PPM' + sl.toString() + '"" value=""' + stltype+'""     /></td>'
                        + '<td style=""""><input  style=""width: 70px;"" class=""daysBeforeShipping"" readonly type=""text"" name=""dayBeforeShipping"" id=""PPM' + sl.toString() + '"" value=""""     /></td>'
                        + '<td style=""""><input type=""button"" value=""Delete Row"" onclick=""DeleteRow(this)""></td>'
                        + '</tr>');
                }

            });
            $('#brand').val(machnType).trigger('change')");
                WriteLiteral(@";
            document.getElementById(""myTable"").deleteTFoot();
        }

        function LoadYear(elementId) {
            $.ajax({
                url: apiHeader + 'api/Common/GetAllocateYear',
                type: ""GET"",
                dataType: ""json"",
                async: false,
                success: function (result) {

                    if (result.length > 0) {
                        $('#' + elementId + '').empty();
                        for (var i = 0; i < result.length; i++) {

                            $('#' + elementId + '').append($(""<option></option>"").val(result[i].YearId).html(result[i].YearName));
                        }
                    }

                    $('#dllYear').val(currentYear).trigger('change');

                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });

        }


        function GetFactory(elamentName) {

            var yearI");
                WriteLiteral(@"d = parseInt($('#year').val());
            $.ajax({
                url: apiHeader + 'api/Common/GetAllMachineQty/' + yearId,
                type: ""GET"",
                dataType: ""json"",
                async: false,
                success: function (result) {

                    allYears = result
                    const key = 'ShortForm';
                    const FactoryResult = [...new Map(result.map(item =>
                        [item[key], item])).values()];
                    if (result.length > 0) {
                        $('#' + elamentName + '').empty();
                        $('#' + elamentName + '').append(""<option value=''>--Select Factory--</option>"");
                        for (var i = 0; i < FactoryResult.length; i++) {

                            $('#' + elamentName + '').append($(""<option></option>"").val(FactoryResult[i].FactoryId).html(FactoryResult[i].ShortForm));
                        }
                    }
                },
                error: f");
                WriteLiteral(@"unction (errormessage) {
                    alert(errormessage.responseText);
                }
            });

        }
        function GetGauge(elamentName) {

            var yearId = parseInt($('#year').val());
            $.ajax({
                url: apiHeader + 'api/Common/GetAllMachineQty/' + yearId,
                type: ""GET"",
                dataType: ""json"",
                async: false,
                success: function (result) {

                    allYears = result
                    const key = 'GaugeId';
                    const FactoryResult = [...new Map(result.map(item =>
                        [item[key], item])).values()].sort();
                    if (result.length > 0) {
                        $('#' + elamentName + '').empty();
                        $('#' + elamentName + '').append(""<option value=''>--Select Gauge--</option>"");
                        for (var i = 0; i < FactoryResult.length; i++) {

                            $('#' + elamentName ");
                WriteLiteral(@"+ '').append($(""<option></option>"").val(FactoryResult[i].GaugeId).html(FactoryResult[i].GaugeDesc));
                        }
                    }
                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });

        }
        function GetBrand(elamentName) {

            var yearId = parseInt($('#year').val());
            $.ajax({
                url: apiHeader + 'api/Common/GetAllMachineQty/' + yearId,
                type: ""GET"",
                dataType: ""json"",
                async: false,
                success: function (result) {

                    allYears = result
                    const key = 'BrandId';
                    const FactoryResult = [...new Map(result.map(item =>
                        [item[key], item])).values()].sort();
                    if (result.length > 0) {
                        $('#' + elamentName + '').empty();
                        $('#' + e");
                WriteLiteral(@"lamentName + '').append(""<option value=''>--Select Brand--</option>"");
                        for (var i = 0; i < FactoryResult.length; i++) {

                            $('#' + elamentName + '').append($(""<option></option>"").val(FactoryResult[i].BrandId).html(FactoryResult[i].McnType));
                        }
                    }
                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });

        }


        function GetMcnBrand(elamentName) {

            var yearId = parseInt($('#year').val());
            $.ajax({
                url: apiHeader + 'api/Common/GetAllMachineQty/' + yearId,
                type: ""GET"",
                dataType: ""json"",
                async: false,
                success: function (result) {

                    allYears = result
                    const key = 'BrandId';
                    const FactoryResult = [...new Map(result.map(item =>
 ");
                WriteLiteral(@"                       [item[key], item])).values()].sort();
                    if (result.length > 0) {
                        $('#' + elamentName + '').empty();
                        $('#' + elamentName + '').append(""<option value=''>--Select Brand--</option>"");
                        for (var i = 0; i < FactoryResult.length; i++) {

                            $('#' + elamentName + '').append($(""<option></option>"").val(FactoryResult[i].BrandId).html(FactoryResult[i].McnType));
                        }
                    }
                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });

        }


        function GetSlotDate() {

            var yearId = parseInt($('#year').val());
            var factoryId = parseInt($('#factory').val());
            var brandId = parseInt($('#brand').val());
            var gaugeId = parseInt($('#gauge').val());
            var leadTime = parseInt($");
                WriteLiteral(@"('#leadTime').val());
            if (isNaN(yearId) || isNaN(factoryId) || isNaN(gaugeId) || isNaN(leadTime)) {

                toastr.warning('Please Select All List Element');
            } else {
                $.ajax({
                    url: apiHeader + 'api/CreateSlot/StartDateEndDate/' + yearId + '/' + factoryId + '/' + brandId + '/' + gaugeId + '/' + leadTime,
                    type: ""GET"",
                    dataType: ""json"",
                    async: false,
                    success: function (result) {

                        $('#startDate').val(result[0].StartDate);
                        $('#endDate').val(result[0].EndDate);
                        $('#McnQty').val(result[0].TotalMachineQty);
                        $('#machineQty').html(""Total Machine Qty is:"" + result[0].TotalMachineQty);
                        CalculationForMachine();

                    },
                    error: function (errormessage) {
                        alert(errormessage.responseT");
                WriteLiteral(@"ext);
                    }
                });
            }

        }

        function GetStatDateReCalculate() {

            if ($('#manualFromDate').prop(""checked"") == true) {

                var yearId = parseInt($('#year').val());
                var factoryId = parseInt($('#factory').val());
                var brandId = parseInt($('#brand').val());
                var gaugeId = parseInt($('#gauge').val());
                if (isNaN(yearId) || isNaN(factoryId) || isNaN(gaugeId)) {

                    toastr.warning('Please Select All List Element');
                } else {
                    $.ajax({
                        url: apiHeader + 'api/CreateSlot/GetLastDateForPlanning/' + yearId + '/' + factoryId + '/' + brandId + '/' + gaugeId,
                        type: ""GET"",
                        dataType: ""json"",
                        async: false,
                        success: function (result) {


                            $('#startDate').attr(""disabled"", ");
                WriteLiteral(@"false);
                            $('#startDate').val("""");
                            // $('#startDate').attr('min', result[0].LastDate);
                            //('#startDate').datepicker({
                            //    ""minDate"": '0'
                            //});
                            $('#LastDateLabel').text(""Last Planning Slot Date Is: "" + result[0].LastDate);
                            var dates = result[0].LastDate;
                            $('#startDate').datepicker({
                                autoclose: true,
                                dateFormat: 'dd-M-yy',
                                minDate: new Date(dates)

                            });
                        },
                        error: function (errormessage) {
                            alert(errormessage.responseText);
                        }
                    });
                }

            } else {
                $('#startDate').val("""");
                $('#star");
                WriteLiteral(@"tDate').attr(""disabled"", true);
                GetSlotDate();
            }
        }

        function CalculateDate() {

            var previousDate = $(""#LastDateLabel"").text();
            var date = $(""#startDate"").val();
            var leadTime = $(""#leadTime"").val();
            if (new Date(date) <= new Date(previousDate)) {
                toastr.warning(""Please Input Valid Date"");
                $(""#startDate"").val("""");
                $(""#endDate"").val("""");
                return;
            } else {
                $.ajax({
                    url: apiHeader + 'api/CreateSlot/CalculateLastDateForPlanning/' + date + '/' + leadTime,
                    type: ""GET"",
                    dataType: ""json"",
                    async: false,
                    success: function (result) {


                        $('#startDate').attr(""disabled"", false);
                        $('#endDate').val(result[0].EndDate);
                        $('#myTable tbody tr').each(functio");
                WriteLiteral(@"n (index) {
                            var startDate = $('#startDate').val();
                            $(this).find('.knitStartDate').val(startDate);
                            $(this).find('.knitEndDate').val(result[0].EndDate);
                            $(this).find('.trailDate').val(result[0].TrialDate);

                        });



                    },
                    error: function (errormessage) {
                        alert(errormessage.responseText);
                    }
                });
            }
        }
        function SubTractDays(dateObj, numDays) {
            dateObj.setDate(dateObj.getDate() - numDays);
            return dateObj;
        }

        function CalculationForMachine() {
            var year = $('#year').val();
            var leadTime = $('#leadTime').val();
            var startDate = $('#startDate').val();
            var endDate = $('#endDate').val();

            $.ajax({
                url: apiHeader + 'api/InitialPl");
                WriteLiteral(@"anning/GetWorkableMuniteFCalCuMcn/' + startDate + '/' + endDate + '/'+ year + '/' + leadTime,
                type: ""GET"",
                dataType: ""json"",
                async: false,
                success: function (result) {
                    debugger;
                    //var productionPerMcn = parseInt(parseInt(result[0].DailyWorkMunit) / parseInt(smv));
                    //var TotalProductionPerMcn = parseInt(productionPerMcn * parseInt(result[0].LeadTime));
                    //var reqMcn = Math.ceil(parseInt(ocQty) / TotalProductionPerMcn);
                    //$(""#ProductionPerMachine"").val(productionPerMcn);
                    //$(""#ReqMachine"").val(reqMcn);
                    //$(""#ProdutionPerDay"").val(productionPerMcn * reqMcn);
                    ////$(""#Traildate"").val();
                    //$(""#KnittingStart"").val(result[0].StartDate);
                    //$(""#KnittingEnd"").val(result[0].EndDate);

                    var totalMcnQty = 0;
                    v");
                WriteLiteral(@"ar productionADay = 0;
                    var totalPlanQty = 0;
                    document.getElementById(""myTable"").deleteTFoot();
                    $('#myTable tbody tr').each(function (index) {
                        debugger;
                        var smvKnFCal = parseInt($(this).find('.smvKnlbl').text());
                        var KnittQty = parseInt($(this).find('.remainingQty').val());
                        var productionPerMcn = parseInt(Math.round(result[0].DailyWorkMunit) / smvKnFCal);
                        var TotalProductionPerMcn = parseInt(productionPerMcn * parseInt(result[0].LeadTime));
                        var reqMcn = Math.round(KnittQty / TotalProductionPerMcn);
                        if (reqMcn == 0) {
                            reqMcn = 1;
                        }
                        var proPerDay = reqMcn * productionPerMcn;
                        var exFact = $(this).find('.exFactoryDay').text();
                        var trlDate = new Date(new ");
                WriteLiteral(@"Date(startDate) - 5 * 24 * 60 * 60 * 1000);
                        $(this).find('.productionPeraMcn').val(productionPerMcn);
                        $(this).find('.reqMachine').val(reqMcn);
                        $(this).find('.productionPerDay').val(proPerDay);
                        $(this).find('.knitStartDate').val(startDate);
                        $(this).find('.knitEndDate').val(endDate);
                        $(this).find('.trailDate').val(moment(trlDate).format('DD MMM YYYY'));
                        var dayBeforeShipping = daysdifference(new Date(exFact), new Date(endDate));
                        $(this).find('.daysBeforeShipping').val(dayBeforeShipping);
                        $('.trailDate').datepicker({
                            autoclose: true,
                            dateFormat: 'dd-M-yy'

                        });
                        totalMcnQty += reqMcn;
                        productionADay += proPerDay;
                        totalPlanQty += KnittQty");
                WriteLiteral(@";
                    });
                    var foot = $('<tfoot>').appendTo(""#myTable"");
                    foot.append($('<td colspan=""2""><b>Total</b></td><td class=""totalQty"">' + totalPlanQty +'</td><td  colspan=""5""></td><td class=""totalAllMcn"">' + totalMcnQty + '</td><td class=""totalProPerDay"">' + productionADay+'</td>'));

                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }

        function daysdifference(firstDate, secondDate) {
            var startDay = new Date(firstDate);
            var endDay = new Date(secondDate);

            // Determine the time difference between two dates
            var millisBetween = startDay.getTime() - endDay.getTime();

            // Determine the number of days between two dates
            var days = millisBetween / (1000 * 3600 * 24);

            // Show the final number of days between dates
            return Math.round(Ma");
                WriteLiteral(@"th.abs(days));
        }
        function Close() {
            $(""#myTable"").find(""tr:gt(0)"").remove();
            $('#leadTime').val("""");
            $('#startDate').val("""");
            $('#endDate').val("""");
            $('#PoListModal').modal('hide');
            document.getElementById(""myTable"").deleteTFoot();
            $(""#manualFromDate"").prop(""checked"", false);
            $('#LastDateLabel').text("""");
            $('#machineQty').text("""");
        }
        function CreateSlot() {
            var totaoFactoryMcn = parseInt($('#McnQty').val());
            var allocateMcn = parseInt($('.totalAllMcn').text());
            //$('#myTable tbody tr').each(function (index) {
            //    if ($(this).find('.trailDate').val() == """" || $(this).find('.trailDate').val() == null) {
            //        toastr.warning('Please Select Trail Date..');
            //        return false;
            //    }
            //});
            var gauge = parseInt($('#gauge').val());
       ");
                WriteLiteral(@"     var brand = parseInt($('#brand').val());
            if (totaoFactoryMcn == allocateMcn || totaoFactoryMcn > allocateMcn) {
                var obj = {
                    YearId: parseInt($('#year').val()),
                    FactoryId: parseInt($('#factory').val()),
                    BrandId: parseInt($('#brand').val()),
                    GaugeId: parseInt($('#gauge').val()),
                    LeadTime: parseInt($('#leadTime').val()),
                    StartDate: $('#startDate').val(),
                    EndDate: $('#endDate').val(),
                    StageId: 1,
                    NoOfMachine: parseInt($('#McnQty').val())
                };
                var PoList = [];
                var planningSlotDetailsId, planeSlotMasterId, pOCod
                    , poQty, smvKn, requiredMachine, remarks, poOwnT;
                var TrialValidate = true;
                $('#myTable tbody tr').each(function (index) {
                    pOCod = parseInt($(this).find('.poCodc')");
                WriteLiteral(@".text());
                    poQty = $(this).find('.remainingQty').val();
                    smvKn = parseInt($(this).find('.smvKnlbl').text());
                    requiredMachine = $(this).find('.reqMachine').val();
                    remarks = $(this).find('.remarks').val();
                    trialDate = $(this).find('.trailDate').val();
                    previousQty = $(this).find('.alreadyKnitt').text();
                    productionPerMcnQty = $(this).find('.productionPeraMcn').val();
                    productionPerDayQty = $(this).find('.productionPerDay').val();
                    dayBeforeShippingqty = $(this).find('.daysBeforeShipping').val();

                    posplittype = $(this).find('.ppSplit').text();
                    knop = $(this).find('.knOp').text();

                    poOwnT = parseInt($(this).find('.poOwn').text());
                    debugger;
                    //---->Form validation goes here
                    if (parseInt(requiredMachine) == 0)");
                WriteLiteral(@" {
                        toastr.warning('Require Machine is ivalid. Please Check');
                        return false;
                    }
                    if (trialDate == """" || trialDate == null  || trialDate == '') {
                        TrialValidate = false;
                        return;
                    }
                    if (parseInt(poQty) == 0) {
                        toastr.warning('Any Plan Qty Is Zero. Please Check');
                        return false;
                    }
                    PoList.push({
                        PlanningSlotDetailsId: planningSlotDetailsId,
                        PlaneSlotMasterId: planeSlotMasterId,
                        POCod: pOCod,
                        PoQty: poQty,
                        SmvKn: smvKn,
                        RequiredMachine: requiredMachine,
                        Remarks: remarks,
                        TrialDate: trialDate,
                        PreviousQty: previousQty,
         ");
                WriteLiteral(@"               ProductionPerMcn: productionPerMcnQty,
                        PorductionPerDay: productionPerDayQty,
                        DaybeforeKnitt: dayBeforeShippingqty,
                        PoSplitId: posplittype,
                        KntOperationId: knop,
                        PoOwnType: poOwnT
                    });

                });

                obj.PlanningSlotDetails = PoList;

                var aLisrt = obj;
                if (TrialValidate == false) {
                    toastr.warning('Please Select Trail Date..');
                    return false;
                }
                else {
                    $.ajax({
                    type: ""POST"",
                    url: apiHeader + 'api/InitialPlanning/SaveSlot',
                    contentType: ""application/json;charset=utf-8"",
                    data: JSON.stringify(obj),
                    success: function (result) {

                        if (result == true) {
                       ");
                WriteLiteral(@"    
                            $('#PoListModal').modal(""toggle"");
                            $(""#myTable  tbody tr"").remove();
                            Close();
                            InitialPlanningList();
                            toastr.success(
                                'Save SuccessFull!',
                                'Yes',
                                {
                                    timeOut: 3000,
                                    fadeOut: 3000,
                                    onHidden: function () {

                                      
                                    }
                                }
                            );
                        } else {
                            toastr.warning('problems finding / Session End');
                        }

                    },

                    complete: function () {
                        // window.location.href = '");
#nullable restore
#line 1031 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\View\InitialPlanningListModify.cshtml"
                                              Write(Url.Action("CreateSlot", "View"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';

                    },
                    error: function (errormessage) {
                        alert(errormessage.responseText);
                    }
                });
                }


            } else {
                toastr.warning('Machine Quantity is Insufficient .');
                return false;
            }
        }

        function CalculateMachine(element) {

            var FactoryId= parseInt($('#factory').val());
            var Leaddate = parseInt($('#leadTime').val());

            var kntQty = element.closest(""tr"").find(""input[class=remainingQty]"").val();
            var poQty = parseInt(element.closest(""tr"").find("".ocQtyc"").text());

            var AlreadykntQty = parseInt(element.closest(""tr"").find("".alreadyKnitt"").text());
            if (isNaN(FactoryId) || isNaN(Leaddate)) {
                toastr.warning('Select Factory and Lead Time');
                element.closest(""tr"").find(""input[class=remainingQty]"").val((poQty - AlreadykntQty));
  ");
                WriteLiteral(@"              return false;
            }
            if (kntQty > (poQty + AlreadykntQty)) {
                toastr.warning('Knitting Quantity is Insufficient .');
                element.closest(""tr"").find(""input[class=remainingQty]"").val((poQty - AlreadykntQty));
                kntQty = (poQty - AlreadykntQty);
            }
            //var smvFKn = element.closest(""tr"").find(""input[class=smvKn]"").text();
            var productionPerMcn = element.closest(""tr"").find(""input[class=productionPeraMcn]"").val();
            var leadTime = $('#leadTime').val();
            //var leadTime = isNaN(parseInt($('#leadTiemReCal').val())) ? parseInt($('#ActualLeadTime').val()) : $('#leadTiemReCal').val();
            var TotalProductionPerMcn = parseInt(productionPerMcn * parseInt(leadTime));
            var reqMcn = Math.round(parseInt(kntQty) / TotalProductionPerMcn);
            element.closest(""tr"").find(""input[class=reqMachine]"").val(reqMcn);
            element.closest(""tr"").find(""input[class=prod");
                WriteLiteral(@"uctionPerDay]"").val(reqMcn * productionPerMcn);
            var totalMcnQty = 0;
            var totalProPerDay = 0;
            $(""#myTable tbody tr"").each(function (index) {


                var reqMcn = parseInt($(this).find('.reqMachine').val());
                var properDay = parseInt($(this).find('.productionPerDay').val());
                totalProPerDay += properDay;
                totalMcnQty += reqMcn;
            });
            //$('#newTotalMcnLbl').text("""");
            //$('#newTotalMcn').val(0);
            //$('#newTotalMcnLbl').text(""New Allocate Machine is: "" + totalMcnQty);
            $('.totalAllMcn').text(totalMcnQty);
            $('.totalProPerDay').text(totalProPerDay);
            //var oldMcnQty = parseInt($('#machineQtyInfo').text());
            //if (oldMcnQty < totalMcnQty) {
            //    $(""#slotSaveBtn"").prop(""disabled"", true);
            //    toastr.warning('Insufficient Machine Qty...!!!');
            //} else {
            //
            //");
                WriteLiteral(@"    var remainingQty = oldMcnQty - totalMcnQty;
            //    $('#RemainingMachineInfo').text(remainingQty);
            //    $(""#slotSaveBtn"").prop(""disabled"", false);
            //}
        }

         function DeleteRow(element) {

             var requiredMachine = parseInt($(element).closest(""tr"").find('.reqMachine').val());

             var totalMachine = $('.totalAllMcn').text();
             totalMachine = totalMachine - requiredMachine;
             $('.totalAllMcn').text(totalMachine);
            $(element).closest(""tr"").remove();

        }

        function SearchGRN(data) {

             var urlpath = '");
#nullable restore
#line 1114 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\View\InitialPlanningListModify.cshtml"
                       Write(Url.Action("SearchGRN", "PartialView"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
            $.ajax({
                url: urlpath,
                type: ""Get"",
                dataType: 'html',
                async: false,
                data: { styleCode: data },
                success: function (result) {

                    $('#GRNModal').modal({ backdrop: 'static', keyboard: false });
                    $('#GRNBody').html(result);
                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }
        function SearchTAndA(data) {

             var urlpath = '");
#nullable restore
#line 1133 "D:\AKLProjects\ZewelProjects\AKLNew\aklplanningGitHubLive\Views\View\InitialPlanningListModify.cshtml"
                       Write(Url.Action("SearchTAndA", "PartialView"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
            $.ajax({
                url: urlpath,
                type: ""Get"",
                dataType: 'html',
                async: false,
                data: { styleCode: data },
                success: function (result) {

                    $('#TAndAModal').modal({ backdrop: 'static', keyboard: false });
                    $('#TAndABody').html(result);
                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<System.Data.DataSet> Html { get; private set; }
    }
}
#pragma warning restore 1591
